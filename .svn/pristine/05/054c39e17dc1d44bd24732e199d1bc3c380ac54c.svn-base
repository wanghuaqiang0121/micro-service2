package org.web.module.bone.age.controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.codec.binary.Base64;
import org.service.core.api.ApiCodeEnum;
import org.service.core.api.JsonApi;
import org.service.core.auth.control.RequiresAuthentication;
import org.service.core.auth.level.Level;
import org.service.core.entity.BaseEntity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.web.module.bone.age.domain.AiReadFilm;
import org.web.module.bone.age.domain.BoneAgeOrder;
import org.web.module.bone.age.global.BaseGlobal;
import org.web.module.bone.age.global.GlobalEnum.Menarche;
import org.web.module.bone.age.global.GlobalEnum.Sex;
import org.web.module.bone.age.service.AiReadFilmService;
import org.web.module.bone.age.service.BoneAgeOrderService;
import org.web.module.bone.age.service.HttpIOUtil;


/**
 * Copyright © 2019 四川易迅通健康医疗技术发展有限公司. All rights reserved.
 *
 * @author: ChenYan
 * @date: 2019年3月4日
 * @description: 人工智能评级表
 */
@RestController 
public class AiReadFilmController {
	Logger log = LoggerFactory.getLogger(AiReadFilmController.class);
	private final static Logger logger = LoggerFactory.getLogger(AiReadFilmController.class);
	@Resource
	private AiReadFilmService aiReadFilmService;
	@Value("${upload.url}")
	private String uploadUrl;
	@Resource
	private BoneAgeOrderService boneAgeOrderService;
	@Resource
	private HttpIOUtil httpIOUtil;
	private static final String BOUNDARY = "----WebKitFormBoundary7MA4YWxkTrZu0gW";
	/**
	 * @author: ChenYan
	 * @date: 2019年3月4日
	 * @param aiReadFilm
	 * @param result
	 * @param token
	 * @param organizationTeamId
	 * @return
	 * @description: 人工智能评级记录表新增（每次新增都删除原来的）
	 */
	@RequiresAuthentication(ignore=true,value = { "web-module-bone-age:ai-read-film:insert" },level = Level.OPERATION)
	@PostMapping(value = { "/ai/read/film" })
	@Transactional
	public JsonApi insert(@RequestBody @Validated({ BaseEntity.Insert.class }) AiReadFilm aiReadFilm,
			BindingResult result, @RequestHeader(required = true, value = BaseGlobal.TOKEN_FLAG) String token,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_ID) Integer organizationId,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_TEAM_ID) Integer organizationTeamId) {
		/*查询数据是否已存在*/
		aiReadFilm.setBaseBoneAgeOrderId(aiReadFilm.getBaseBoneAgeOrderId());
		Map<String, Object> aiReadFilmMap=aiReadFilmService.getOne(aiReadFilm);
		/*存在先删除*/
		if (aiReadFilmMap!=null) {
			if (aiReadFilmService.delete(aiReadFilm)<0) {
				throw new RuntimeException();
			}
		}
		aiReadFilm.setOrganizationId(organizationId);
		aiReadFilm.setCreateTime(new Date());
		if (aiReadFilmService.insert(aiReadFilm)>0) {
			return new JsonApi(ApiCodeEnum.OK);
		}
		return new JsonApi(ApiCodeEnum.FAIL);
	}
	
	@RequiresAuthentication(ignore=true,value = { "web-module-bone-age:ai-boneage-upload:insert" },level = Level.OPERATION)
	@PostMapping(value = { "/ai/boneage/upload/{baseBoneAgeOrderId}" })
	public JsonApi upload(@RequestParam("file") MultipartFile file,@Validated({ BaseEntity.Insert.class }) AiReadFilm aiReadFilm,
			BindingResult result, @RequestHeader(required = true, value = BaseGlobal.TOKEN_FLAG) String token,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_ID) Integer organizationId,
			@PathVariable("baseBoneAgeOrderId") Integer baseBoneAgeOrderId,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_TEAM_ID) Integer organizationTeamId) throws IllegalStateException, IOException{
		BoneAgeOrder boneAgeOrder = new BoneAgeOrder();
		boneAgeOrder.setId(baseBoneAgeOrderId);
		Map<String, Object>  boneAgeOrderMap=boneAgeOrderService.getOne(boneAgeOrder);
		if (boneAgeOrderMap==null) {
			return new JsonApi(ApiCodeEnum.NOT_FOUND);
		}
		if(boneAgeOrderMap.get("birthday") == null){
			return new JsonApi(ApiCodeEnum.FAIL).setMsg("用户出生信息不完整！");
		}
		float height = (float) boneAgeOrderMap.get("height");
		float weight = (float) boneAgeOrderMap.get("weight");
		Boolean menarcheType = null;
		if(((Integer)boneAgeOrderMap.get("sex")) == Sex.SEX_MAN.getValue()){
			menarcheType = false;
		}
		if(boneAgeOrderMap.get("menarcheType") != null && ((Integer)boneAgeOrderMap.get("menarcheType")) == Menarche.MENARCHE_TYPE_TEO.getValue()){
			menarcheType = true;
		}
		Date birthday = (Date) boneAgeOrderMap.get("birthday");
		
		
		try {
			//发送POST请求 
			URL url = new URL(uploadUrl);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod("POST");
			String plainCredentials = "cy:cy";//用户名：密码
	        String base64Credentials = new String(Base64.encodeBase64(plainCredentials.getBytes()));
	        conn.setRequestProperty("Authorization", "Basic " + base64Credentials);// 对应postman中的Authorization
			conn.setRequestProperty("Content-Type", "multipart/form-data; boundary="+BOUNDARY);
			conn.setRequestProperty("Connection", "Keep-Alive");// 维持长连接
			conn.setUseCaches(false); // 不允许缓存
			conn.setDoOutput(true);// 需要输出
			conn.setDoInput(true);// 需要输入
			
			String boundary = BOUNDARY;// 头
			
			StringBuffer dataStr = new StringBuffer("--"+BOUNDARY);// 传输内容
			/*"Authorization: Basic Y3k6Y3k=
			Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW
			Content-Disposition: form-data; name="file"; filename="C:\Users\Administrator\Desktop\20160809681253-0000000001-0001-10001-1.3.12.2.1107.5.4.4.2318.30000016080710531921800001608 (2).dcm
			
			Content-Disposition: form-data; name="birth_date"
			Content-Disposition: form-data; name="weight"
			Content-Disposition: form-data; name="height"
			Content-Disposition: form-data; name="menarche"
			true";
			*/
			//String filename = file.getOriginalFilename();
			dataStr.append("\r\n")
			.append("Content-Disposition: form-data; name=\"birth_date\"")
			.append("\r\n")
			.append(birthday + "\"")
			.append("\r\n")
			.append("\r\n")
			.append("Content-Disposition: form-data; name=\"weight\"")
			.append("\r\n")
			.append(weight + "\"")
			.append("\r\n")
			.append("\r\n")
			.append("Content-Disposition: form-data; name=\"height\"")
			.append("\r\n")
			.append(height + "\"")
			.append("\r\n")
			.append("\r\n")
			.append("Content-Disposition: form-data; name=\"menarche\"")
			.append("\r\n")
			.append(menarcheType + "\"")
			.append("\r\n")
			.append("\r\n")
			.append("--")
			.append(boundary);
           /* // 开始真正向服务器写文件
            File toFile = null;
            InputStream ins = null;
            ins = file.getInputStream();
            toFile = new File(file.getOriginalFilename());
            inputStreamToFile(ins, toFile);
            ins.close();
            
            File file2 = toFile;
            DataInputStream dis = new DataInputStream(new FileInputStream(file2));
            int bytes = 0;
            byte[] bufferOut = new byte[(int) file2.length()];
            bytes = dis.read(bufferOut);
            out2.write(bufferOut, 0, bytes);
            dis.close();
            dataStr.append(boundary);
            String boundaryMessage = dataStr.toString();
            out2.write(boundaryMessage.getBytes("utf-8"));*/
			// 尾
			//String endBoundary = "\r\n--" + boundary + "--\r\n";
			conn.setRequestProperty("Content-Length", "" + dataStr.length());
			OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream(), "UTF-8");
			out.write(dataStr.toString());
			out.flush();
			out.close();
			
			// 获取响应状态
			if (conn.getResponseCode() != HttpURLConnection.HTTP_OK) {
				return new JsonApi(ApiCodeEnum.FAIL).setMsg("人工智能图片传输失败");
			}
			// 获取响应内容体
			String line, results = "";
			BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"));
			while ((line = in.readLine()) != null) {
				results += line + "\n";
			}
			in.close();
			System.out.println(results);
		}catch (Exception e) {
			logger.error("upload ai picture fail");
			return new JsonApi(ApiCodeEnum.FAIL);
		}
		return new JsonApi(ApiCodeEnum.OK); 
		 //获取  交易状态  : SUCCESS—支付成功 
		//wexinTradeState = rootElt.elementText("trade_state");
		
		
		/*查询数据是否已存在*/
		/*aiReadFilm.setBaseBoneAgeOrderId(aiReadFilm.getBaseBoneAgeOrderId());
		Map<String, Object> aiReadFilmMap=aiReadFilmService.getOne(aiReadFilm);
		存在先删除
		if (aiReadFilmMap!=null) {
			if (aiReadFilmService.delete(aiReadFilm)<0) {
				throw new RuntimeException();
			}
		}
		aiReadFilm.setOrganizationId(organizationId);
		aiReadFilm.setCreateTime(new Date());
		if (aiReadFilmService.insert(aiReadFilm)>0) {
			return new JsonApi(ApiCodeEnum.OK);
		}
		return new JsonApi(ApiCodeEnum.FAIL);*/
	}
	@RequiresAuthentication(ignore=true,value = { "web-module-bone-age:ai-boneage-upload:insert" },level = Level.OPERATION)
	@PostMapping(value = { "/ai/boneage/upload2/{baseBoneAgeOrderId}" })
	public JsonApi upload2(@RequestParam("file") MultipartFile file,@Validated({ BaseEntity.Insert.class }) AiReadFilm aiReadFilm,
			BindingResult result, @RequestHeader(required = true, value = BaseGlobal.TOKEN_FLAG) String token,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_ID) Integer organizationId,
			@PathVariable("baseBoneAgeOrderId") Integer baseBoneAgeOrderId,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_TEAM_ID) Integer organizationTeamId) throws IllegalStateException, IOException{
		String requestURL = "http://47.101.135.192:5021/boneage/upload";
		//HttpIOUtil httpReuqest = new HttpIOUtil();
		BoneAgeOrder boneAgeOrder = new BoneAgeOrder();
		boneAgeOrder.setId(baseBoneAgeOrderId);
		Map<String, Object>  boneAgeOrderMap=boneAgeOrderService.getOne(boneAgeOrder);
		if (boneAgeOrderMap==null) {
			return new JsonApi(ApiCodeEnum.NOT_FOUND);
		}
		if(boneAgeOrderMap.get("birthday") == null){
			return new JsonApi(ApiCodeEnum.FAIL).setMsg("用户出生信息不完整！");
		}
		float height = (float) boneAgeOrderMap.get("height");
		float weight = (float) boneAgeOrderMap.get("weight");
		Boolean menarcheType = null;
		if(((Integer)boneAgeOrderMap.get("sex")) == Sex.SEX_MAN.getValue()){
			menarcheType = false;
		}
		if(boneAgeOrderMap.get("menarcheType") != null && ((Integer)boneAgeOrderMap.get("menarcheType")) == Menarche.MENARCHE_TYPE_TEO.getValue()){
			menarcheType = true;
		}
		Date birthday = (Date) boneAgeOrderMap.get("birthday");
		
		Map<String,String> requestText = new HashMap<String,String>();
		requestText.put("birth_date", birthday.toString());
		requestText.put("weight", weight+"");
		requestText.put("height", height+"");
		requestText.put("menarche", menarcheType+"");
		Map<String,MultipartFile> requestFile = new HashMap<String,MultipartFile>();
		//File file = new File("C:\\Users\\Administrator\\Desktop\\pic\\face.JPG");
		//FileInputStream fileInputStream = new FileInputStream(file);
		MultipartFile multipartFile = file;
		requestFile.put("file",multipartFile);
		try {
			httpIOUtil.sendRequest(requestURL, requestText, requestFile);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return new JsonApi(ApiCodeEnum.FAIL);
	}
	public static void inputStreamToFile(InputStream ins, File file) {
	    try {
	        OutputStream os = new FileOutputStream(file);
	        int bytesRead = 0;
	        byte[] buffer = new byte[8192];
	        while ((bytesRead = ins.read(buffer, 0, 8192)) != -1) {
	            os.write(buffer, 0, bytesRead);
	        }
	        os.close();
	        ins.close();
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	}
}
