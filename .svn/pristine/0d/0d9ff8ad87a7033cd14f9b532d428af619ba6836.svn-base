package org.web.module.height.obesity.service;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.web.module.height.obesity.dao.ChildrenMeasureMapper;
import org.web.module.height.obesity.dao.WhoStandardBmiSdMapper;
import org.web.module.height.obesity.dao.WhoStandardHeightWeightSdMapper;
import org.web.module.height.obesity.dao.WhoStandardWeightSdMapper;
import org.web.module.height.obesity.entity.ChildrenMeasure;
import org.web.module.height.obesity.entity.Diagnosis;
import org.web.module.height.obesity.entity.WhoStandardBmiSd;
import org.web.module.height.obesity.entity.WhoStandardHeightWeightSd;
import org.web.module.height.obesity.global.BaseGlobal;
import org.web.module.height.obesity.tools.HeightObesityCalculation;

/**
 * Copyright © 2018 四川易迅通健康医疗技术发展有限公司. All rights reserved.
 *
 * @author: ZhangGuangZhi
 * @date: 2018年12月21日
 * @description: WeightEvaluationService 体重评价
 */
@Service
public class WeightEvaluationService {

	@Resource
	private DiagnosisService diagnosisService;
	@Resource
	private WhoStandardHeightWeightSdMapper whoStandardHeightWeightSdMapper;
	@Resource
	private WhoStandardBmiSdMapper whoStandardBmiSdMapper;
	@Resource
	private WhoStandardWeightSdMapper whoStandardWeightSdMapper;
	@Resource
	private ChildrenMeasureMapper childrenMeasureMapper;

	/**
	 * @author: ZhangGuangZhi
	 * @date: 2018年1月8日
	 * @param
	 * @return
	 * @description: 体重肥胖评价
	 */
	public Map<String, Object> getObesityEvaluation(Diagnosis diagnosis) {
		Map<String, Object> map = new HashMap<>();
		String evaluation = null;
		String more = null;
		Boolean dwarfism = false;
		double age = HeightObesityCalculation.getAge(diagnosis.getMonthAge());
		String name = diagnosis.name + HeightObesityCalculation.getName(age);

		/* 查询用户出生别体重 */
		double birthBmi = 0;
		Integer birthBmiSd = null;
		if (diagnosis.getChildrenMaternity() != null && diagnosis.getChildrenMaternity().get("birthHeight") != null
				&& diagnosis.getChildrenMaternity().get("birthWeight") != null) {

			/* 身高别体重表 */
			birthBmi = diagnosisService.getBMI(
					((Float) diagnosis.getChildrenMaternity().get("birthHeight")).doubleValue(),
					((Float) diagnosis.getChildrenMaternity().get("birthWeight")).doubleValue());

			WhoStandardHeightWeightSd whoStandardHeightWeightSd = new WhoStandardHeightWeightSd();
			whoStandardHeightWeightSd.setSex(diagnosis.getSex());
			whoStandardHeightWeightSd.setMonthAgeStart(0);
			whoStandardHeightWeightSd.setMonthAgeEnd(24);
			whoStandardHeightWeightSd.setStandardValue(new BigDecimal(birthBmi));
			whoStandardHeightWeightSd.setHeight(new BigDecimal(diagnosis.getHeight()));

			Map<String, Object> whoStandardHeightWeightSdMap = whoStandardHeightWeightSdMapper
					.getHeightWeightSd(whoStandardHeightWeightSd);
			if (whoStandardHeightWeightSdMap != null) {
				birthBmiSd = (Integer) whoStandardHeightWeightSdMap.get("sd");
				if (birthBmiSd == -3) {
					if (((BigDecimal) whoStandardHeightWeightSdMap.get("standardValue"))
							.doubleValue() > ((Float) diagnosis.getChildrenMaternity().get("birthWeight"))
									.doubleValue()) {
						birthBmiSd = -2;
					}
				}
			}
		}

		/* 查询用户上次测量记录别体重 */
		Integer perBmiSd = null;
		ChildrenMeasure childrenMeasure = new ChildrenMeasure();
		childrenMeasure.setUserId(diagnosis.getUserId());
		childrenMeasure.setId(diagnosis.getChildrenMeasureId());
		Map<String, Object> perChildrenMeasureMap = childrenMeasureMapper.getNewOne(childrenMeasure);
		if (perChildrenMeasureMap != null) {
			double perBmi = diagnosisService.getBMI(((Float) perChildrenMeasureMap.get("currentHeight")).doubleValue(),
					((Float) perChildrenMeasureMap.get("currentWeight")).doubleValue());

			/* 查询用户上次记录所在SD */
			if (((Integer) perChildrenMeasureMap.get("monthAge")).intValue() <= 60) {
				/* 身高别体重表 */
				WhoStandardHeightWeightSd whoStandardHeightWeightSd = new WhoStandardHeightWeightSd();
				whoStandardHeightWeightSd.setSex(diagnosis.getSex());
				if (diagnosis.getMonthAge() >= 0 && diagnosis.getMonthAge() <= 24) {
					whoStandardHeightWeightSd.setMonthAgeStart(0);
					whoStandardHeightWeightSd.setMonthAgeEnd(24);
				} else if (diagnosis.getMonthAge() >= 25 && diagnosis.getMonthAge() <= 60) {
					whoStandardHeightWeightSd.setMonthAgeStart(25);
					whoStandardHeightWeightSd.setMonthAgeEnd(72);
				}
				whoStandardHeightWeightSd.setStandardValue(new BigDecimal(perBmi));

				Map<String, Object> whoStandardHeightWeightSdMap = whoStandardHeightWeightSdMapper
						.getHeightWeightSd(whoStandardHeightWeightSd);
				if (whoStandardHeightWeightSdMap != null) {
					perBmiSd = (Integer) whoStandardHeightWeightSdMap.get("sd");
					if (perBmi == -3) {
						if (((BigDecimal) whoStandardHeightWeightSdMap.get("standardValue"))
								.doubleValue() > ((Float) perChildrenMeasureMap.get("currentWeight")).doubleValue()) {
							perBmi = -2;
						}
					}
				}

			} else {
				/* bmi表 */
				WhoStandardBmiSd whoStandardBmiSd = new WhoStandardBmiSd();
				whoStandardBmiSd.setSex(diagnosis.getSex());
				whoStandardBmiSd.setMonthAge(diagnosis.getMonthAge());
				whoStandardBmiSd.setStandardValue(new BigDecimal(perBmi));

				Map<String, Object> whoStandardBmiSdMap = whoStandardBmiSdMapper.getBmiSd(whoStandardBmiSd);
				if (whoStandardBmiSdMap != null) {
					perBmiSd = (Integer) whoStandardBmiSdMap.get("sd");
					if (perBmi == -3) {
						if (((BigDecimal) whoStandardBmiSdMap.get("standardValue"))
								.doubleValue() > ((Float) perChildrenMeasureMap.get("currentWeight")).doubleValue()) {
							perBmi = -2;
						}
					}
				}
			}
		}

		/* 查询用户当前别体重 */
		double bmi = diagnosisService.getBMI(diagnosis.getHeight(), diagnosis.getWeight());
		Integer bmiSd = null;
		double bmiStand = 0;

		/* 查询用户现所在bmi sd */
		if (diagnosis.getEndMonthAge() <= 60) {
			/* 身高别体重表 */
			WhoStandardHeightWeightSd whoStandardHeightWeightSd = new WhoStandardHeightWeightSd();
			whoStandardHeightWeightSd.setSex(diagnosis.getSex());
			if (diagnosis.getMonthAge() >= 0 && diagnosis.getMonthAge() <= 24) {
				whoStandardHeightWeightSd.setMonthAgeStart(0);
				whoStandardHeightWeightSd.setMonthAgeEnd(24);
			} else if (diagnosis.getMonthAge() >= 25 && diagnosis.getMonthAge() <= 60) {
				whoStandardHeightWeightSd.setMonthAgeStart(25);
				whoStandardHeightWeightSd.setMonthAgeEnd(72);
			}
			whoStandardHeightWeightSd.setStandardValue(new BigDecimal(bmi));
			whoStandardHeightWeightSd.setHeight(new BigDecimal(diagnosis.getHeight()));

			Map<String, Object> whoStandardHeightWeightSdMap = whoStandardHeightWeightSdMapper
					.getHeightWeightSd(whoStandardHeightWeightSd);
			if (whoStandardHeightWeightSdMap != null) {
				bmiSd = (Integer) whoStandardHeightWeightSdMap.get("sd");
				bmiStand = ((BigDecimal) whoStandardHeightWeightSdMap.get("standardValue")).doubleValue();
				if (bmiSd == -3) {
					if (bmiStand > diagnosis.getWeight()) {
						bmiSd = -2;
					}
				}
			}

		} else {
			/* bmi表 */
			WhoStandardBmiSd whoStandardBmiSd = new WhoStandardBmiSd();
			whoStandardBmiSd.setSex(diagnosis.getSex());
			whoStandardBmiSd.setMonthAge(diagnosis.getMonthAge());
			whoStandardBmiSd.setStandardValue(new BigDecimal(bmi));

			Map<String, Object> whoStandardBmiSdMap = whoStandardBmiSdMapper.getBmiSd(whoStandardBmiSd);
			if (whoStandardBmiSdMap != null) {
				bmiSd = (Integer) whoStandardBmiSdMap.get("sd");
				bmiStand = ((BigDecimal) whoStandardBmiSdMap.get("standardValue")).doubleValue();

				if (bmiSd == -3) {
					if (bmiStand > diagnosis.getWeight()) {
						bmiSd = -2;
					}
				}
			}
		}

		if (diagnosis.getEndMonthAge() <= 24 && diagnosis.getWeight() < 2.5 && bmiSd != null) {
			/* 0-2岁的小于胎龄儿(出生时体重小于2.5kg,或早产儿出生体重小于孕周的正常体重)与出生时或上次体重/身高相比 */
			if (bmiSd >= -2 && bmiSd < 1) {

				/* 身高别体重表 */
				WhoStandardHeightWeightSd whoStandardHeightWeightSd = new WhoStandardHeightWeightSd();
				whoStandardHeightWeightSd.setSex(diagnosis.getSex());
				if (diagnosis.getMonthAge() >= 0 && diagnosis.getMonthAge() <= 24) {
					whoStandardHeightWeightSd.setMonthAgeStart(0);
					whoStandardHeightWeightSd.setMonthAgeEnd(24);
				} else if (diagnosis.getMonthAge() >= 25 && diagnosis.getMonthAge() <= 60) {
					whoStandardHeightWeightSd.setMonthAgeStart(25);
					whoStandardHeightWeightSd.setMonthAgeEnd(72);
				}
				whoStandardHeightWeightSd.setStandardValue(new BigDecimal(bmi));
				whoStandardHeightWeightSd.setHeight(new BigDecimal(diagnosis.getHeight()));

				Map<String, Object> whoStandardHeightWeightSdMap = whoStandardHeightWeightSdMapper
						.getHeightWeightSd(whoStandardHeightWeightSd);
				if (whoStandardHeightWeightSdMap != null
						&& Integer.parseInt(whoStandardHeightWeightSdMap.get("sd").toString()) < -2) {
					evaluation = String.format(BaseGlobal.WEIGHT_OBESITY_EVALUATION_TWO, name, name);
					dwarfism = true;
				} else {
					evaluation = String.format(BaseGlobal.WEIGHT_OBESITY_EVALUATION_ONE, name);
				}

				// /* 查询当前体重SD */
				// WhoStandardWeightSd whoStandardWeightSd = new WhoStandardWeightSd();
				// whoStandardWeightSd.setSex(diagnosis.getSex());
				// whoStandardWeightSd.setStandardValue(new BigDecimal(diagnosis.getWeight()));
				// whoStandardWeightSd.setMonthAge(diagnosis.getMonthAge());

				// Map<String, Object> whoStandardWeightSdMap =
				// whoStandardWeightSdMapper.getWeightSd(whoStandardWeightSd);
				// if (whoStandardWeightSdMap != null
				// && Integer.parseInt(whoStandardWeightSdMap.get("sd").toString()) < -2) {
				// evaluation = String.format(BaseGlobal.WEIGHT_OBESITY_EVALUATION_TWO, name,
				// name);
				// } else {
				// evaluation = String.format(BaseGlobal.WEIGHT_OBESITY_EVALUATION_ONE, name);
				// }
			} else if ((bmiSd >= -3 && bmiSd < -2) || (birthBmiSd >= -3 && birthBmiSd < -2)) {
				/* M-3SD≤当前和出生时(上一次)体重/身长（身高）<M-2SD(中度消瘦) */
				evaluation = String.format(BaseGlobal.WEIGHT_OBESITY_EVALUATION_THREE, name, name);
				dwarfism = true;
			} else if (bmiSd < -3 && birthBmiSd < -3) {
				/* 当前和出生时(上一次)体重/身长（身高）<M-3SD(重度消瘦) */
				evaluation = String.format(BaseGlobal.WEIGHT_OBESITY_EVALUATION_FOUR, name);
				dwarfism = true;
			} else if (bmiSd < -3 && birthBmiSd >= -3 || birthBmiSd < -2) {
				/* 当前体重/身长（身高）<M-3SD且M-3SD≤出生时或上一次体重/身高<M-2SD */
				evaluation = String.format(BaseGlobal.WEIGHT_OBESITY_EVALUATION_FIVE, name);
				dwarfism = true;
			}
			// else if() {
			// /*当前体重/身长(身高)≥M1SD包括:M＋1SD≤体重/身长（身高）< M＋2SD体重/身长（身高）≥M＋2SD*/
			// }

		} else {
			if ((bmiSd >= 1 && bmiSd < 2)) {
				/*
				 * 1.M＋1SD≤当前体重/身长（身高）< M＋2SD(超重) 2.当前体重/身长（身高）≥M＋2SD(肥胖)
				 */
				evaluation = String.format(BaseGlobal.WEIGHT_OBESITY_SIX, name, "超重");
				more = String.format(BaseGlobal.WEIGHT_OBESITY_SIX_MORE, name, name, name);
			} else if ((bmiSd >= 2)) {
				/*
				 * 2.当前体重/身长（身高）≥M＋2SD(肥胖)
				 */
				evaluation = String.format(BaseGlobal.WEIGHT_OBESITY_SIX, name, "肥胖");
				more = String.format(BaseGlobal.WEIGHT_OBESITY_SIX_MORE, name, name, name);
			} else if (bmiSd >= -2 && bmiSd < 1) {

				evaluation = String.format(BaseGlobal.WEIGHT_OBESITY_SEVEN, name);
				// 查询高危因素
				if (diagnosis.getChildrenFamily() != null) {

					String jibinName = "";
					if (diagnosis.getChildrenFamily().get("motherGestationalDiabetes") != null
							&& ((Integer) diagnosis.getChildrenFamily().get("motherGestationalDiabetes"))
									.intValue() == 1) {
						/* 母亲是患有妊娠糖尿病 */
						jibinName += BaseGlobal.JIBING_NAME_ONE + ",";
					}
					if (diagnosis.getChildrenFamily().get("motherGestationalHypertension") != null
							&& ((Integer) diagnosis.getChildrenFamily().get("motherGestationalHypertension"))
									.intValue() == 1) {
						/* 母亲妊娠高血压 */
						jibinName += BaseGlobal.JIBING_NAME_TWO + ",";
					}

					if (diagnosis.getChildrenFamily().get("familialObesity") != null
							&& ((Integer) diagnosis.getChildrenFamily().get("familialObesity")).intValue() == 1) {
						/* 是否有家族肥胖史 */
						jibinName += BaseGlobal.JIBING_NAME_THREE + ",";
					}

					if (diagnosis.getChildrenFamily().get("fatherObesity") != null
							&& ((Integer) diagnosis.getChildrenFamily().get("fatherObesity")).intValue() == 1) {
						/* 父亲肥胖 */
						jibinName += BaseGlobal.JIBING_NAME_FOUR + ",";
					}

					if (diagnosis.getChildrenFamily().get("fatherObesity") != null
							&& ((Integer) diagnosis.getChildrenFamily().get("fatherObesity")).intValue() == 1) {
						/* 父亲肥胖 */
						jibinName += BaseGlobal.JIBING_NAME_FIVE + ",";
					}

					if (jibinName != "") {
						jibinName = jibinName.substring(0, jibinName.length() - 1);
						evaluation += String.format(BaseGlobal.WEIGHT_OBESITY_SEVEN_BUT, name, jibinName);
					}
				}
			} else if (bmiSd >= -3 && bmiSd < -2) {

				if (bmiSd == -3 && bmiStand > diagnosis.getWeight()) {
					/* 判断是否小于-3SD */
					evaluation = String.format(BaseGlobal.WEIGHT_OBESITY_NINE, name);
				} else {
					evaluation = String.format(BaseGlobal.WEIGHT_OBESITY_EIGHT, name);
				}
			}

			/* 3岁以上儿童增加测骨龄/腹围和血压 */
			if (diagnosis.getMonthAge() > 36) {
				/* 查询是否有腰围数据 */
				if (diagnosis.getAbdomenCircumference() != null
						&& diagnosis.getAbdomenCircumference() > diagnosis.getHeight() / 2) {
					if (evaluation != "") {
						evaluation += "[br]";
					}
					evaluation += String.format(BaseGlobal.WEIGHT_OBESITY_TEN, name);
				} else if (diagnosis.getAbdomenCircumference() != null
						&& diagnosis.getAbdomenCircumference() <= diagnosis.getHeight() / 2) {
					if (evaluation != "") {
						evaluation += "[br]";
					}
					evaluation += String.format(BaseGlobal.WEIGHT_OBESITY_ELEVEN, name);
				}

				/* 查询最近三条血压记录 */
				// ChildrenMeasure childrenMeasure = new ChildrenMeasure();
				// childrenMeasure.setUserId(diagnosis.getUserId());
				// childrenMeasure.setNum(3);

				// List<Map<String, Object>> pressureList =
				// childrenMeasureMapper.getLastList(childrenMeasure);

			}

		}

		/* 干预效果评价 */
		Integer oldBmiSd = null;
		if (perBmiSd != null) {
			oldBmiSd = perBmiSd;
		} else if (birthBmiSd != null) {
			oldBmiSd = birthBmiSd;
		}
		String evaluationOfInterventionEffect = null;
		if (oldBmiSd != null) {
			if (oldBmiSd >= 2 && (bmiSd >= 2 || bmiSd < -2)) {
				/* 上次肥胖体型，本次依旧肥胖体型 */
				evaluationOfInterventionEffect = BaseGlobal.OBSITY_EVALUATION_BAD;
			} else if (oldBmiSd >= 2 && bmiSd < 2 && bmiSd >= -2) {
				/* 上次肥胖体型，本次变为不是肥胖体型 */
				evaluationOfInterventionEffect = BaseGlobal.OBSITY_EVALUATION_GOOD;
			} else if (oldBmiSd >= 1 && oldBmiSd < 2 && (bmiSd >= 1 || bmiSd < -2)) {
				/* 上次超重体型，本次超重或肥胖体型或重度消瘦 */
				evaluationOfInterventionEffect = BaseGlobal.OBSITY_EVALUATION_BAD;
			} else if (oldBmiSd >= 1 && oldBmiSd < 2 && bmiSd < 1 && bmiSd >= -2) {
				/* 上次超重，本次正常 */
				evaluationOfInterventionEffect = BaseGlobal.OBSITY_EVALUATION_GOOD;
			} else if (oldBmiSd >= -2 && oldBmiSd < 1 && bmiSd >= -2 && bmiSd < 1) {
				/* 上次正常，本次正常 */
				evaluationOfInterventionEffect = BaseGlobal.OBSITY_EVALUATION_GOOD;
			} else if (oldBmiSd >= -2 && oldBmiSd < 1 && (bmiSd >= 1 || bmiSd < -2)) {
				/* 上次正常，本次超重或瘦小 */
				evaluationOfInterventionEffect = BaseGlobal.OBSITY_EVALUATION_BAD;
			} else if (oldBmiSd < -3 && (bmiSd < -3 || bmiSd >= 1)) {
				/* 上次重度消瘦，本次重度消瘦或超重 */
				evaluationOfInterventionEffect = BaseGlobal.OBSITY_EVALUATION_BAD;
			} else if (oldBmiSd < -3 && bmiSd > -3 && bmiSd < 1) {
				/* 上次重度消瘦，本次正常方向 */
				evaluationOfInterventionEffect = BaseGlobal.OBSITY_EVALUATION_GOOD;
			}
		}
		map.put("evaluationOfInterventionEffect", evaluationOfInterventionEffect);
		map.put("evaluation", evaluation);
		map.put("more", more);
		map.put("dwarfism", dwarfism);
		return map;
	}
}
