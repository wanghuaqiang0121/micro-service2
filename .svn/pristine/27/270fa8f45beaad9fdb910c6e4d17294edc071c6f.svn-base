package org.web.module.bone.age.controller;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.service.core.api.ApiCodeEnum;
import org.service.core.api.JsonApi;
import org.service.core.api.MultiLine;
import org.service.core.auth.control.RequiresAuthentication;
import org.service.core.auth.level.Level;
import org.service.core.entity.BaseEntity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.web.module.bone.age.domain.AiReadFilm;
import org.web.module.bone.age.domain.BoneAgeOrder;
import org.web.module.bone.age.domain.RemoteBoneAgeOrder;
import org.web.module.bone.age.global.BaseGlobal;
import org.web.module.bone.age.global.GlobalEnum;
import org.web.module.bone.age.global.GlobalEnum.Menarche;
import org.web.module.bone.age.global.GlobalEnum.Sex;
import org.web.module.bone.age.service.AiReadFilmService;
import org.web.module.bone.age.service.BoneAgeOrderService;
import org.web.module.bone.age.service.HttpIOUtil;
import org.web.module.bone.age.service.RemoteBoneAgeOrderService;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
/**
 * Copyright © 2019 四川易迅通健康医疗技术发展有限公司. All rights reserved.
 *
 * @author: ChenYan
 * @date: 2019年3月4日
 * @description: 人工智能评级表
 */
@RestController 
public class AiReadFilmController {
	Logger log = LoggerFactory.getLogger(AiReadFilmController.class);
	private final static Logger logger = LoggerFactory.getLogger(AiReadFilmController.class);
	@Resource
	private AiReadFilmService aiReadFilmService;

	
	@Resource
	private RemoteBoneAgeOrderService remoteBoneAgeOrderService;

	@Value("${upload.url}")
	private String uploadUrl;
	@Resource
	private BoneAgeOrderService boneAgeOrderService;
	@Resource
	private HttpIOUtil httpIOUtil;

	/**
	 * @author: ChenYan
	 * @date: 2019年3月4日
	 * @param aiReadFilm
	 * @param result
	 * @param token
	 * @param organizationTeamId
	 * @return
	 * @description: 人工智能评级记录表新增（每次新增都删除原来的）
	 */
	@RequiresAuthentication(ignore=true,value = { "web-module-bone-age:ai-read-film:insert" },level = Level.OPERATION)
	@PostMapping(value = { "/ai/read/film" })
	@Transactional
	public JsonApi insert(@RequestBody @Validated({ BaseEntity.Insert.class }) AiReadFilm aiReadFilm,
			BindingResult result, @RequestHeader(required = true, value = BaseGlobal.TOKEN_FLAG) String token,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_ID) Integer organizationId,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_TEAM_ID) Integer organizationTeamId) {
		aiReadFilm.setOrganizationId(organizationId);
		/*查询数据是否已存在*/
		aiReadFilm.setBaseBoneAgeOrderId(aiReadFilm.getBaseBoneAgeOrderId());
		Map<String, Object> aiReadFilmMap=aiReadFilmService.getOne(aiReadFilm);
		/*存在先删除*/
		if (aiReadFilmMap!=null) {
			if (aiReadFilmService.delete(aiReadFilm)<0) {
				throw new RuntimeException();
			}
		}
		aiReadFilm.setOrganizationId(organizationId);
		aiReadFilm.setCreateTime(new Date());
		if (aiReadFilmService.insert(aiReadFilm)>0) {
			return new JsonApi(ApiCodeEnum.OK);
		}
		return new JsonApi(ApiCodeEnum.FAIL);
	}
	

	
	/**
	 * @author: ChenYan
	 * @date: 2019年3月6日
	 * @param aiReadFilm
	 * @param result
	 * @param token
	 * @param organizationId
	 * @param organizationTeamId
	 * @return
	 * @description: 使用次数统计
	 */
	@RequiresAuthentication(ignore=true,value = { "web-module-bone-age:ai-read-film:get-times" },level = Level.OPERATION)
	@GetMapping(value = { "/ai/read/film/statistics/imes" })
	public JsonApi statisticsTimes( @Validated({ BaseEntity.SelectOne.class }) AiReadFilm aiReadFilm,
			BindingResult result, @RequestHeader(required = true, value = BaseGlobal.TOKEN_FLAG) String token,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_ID) Integer organizationId,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_TEAM_ID) Integer organizationTeamId) {
			Map<String, Object> resultMap=new HashMap<>();
			/*设置机构ID*/
			aiReadFilm.setOrganizationId(organizationId);
			/*AI使用次数*/
			Map<String, Object> aiMap=aiReadFilmService.getAiReadFilmTimes(aiReadFilm);
			if (aiMap!=null) {
				resultMap.put("aiTimes", aiMap.get("aiTimes")==null ? null : aiMap.get("aiTimes"));
				resultMap.put("remainingSum", aiMap.get("remainingSum")==null ? null : aiMap.get("remainingSum"));
				Double d=(Double) aiMap.get("remainingSum");
				resultMap.put("remainingTimes", aiMap.get("remainingSum")==null ? null :  Math.floor(d/BaseGlobal.MONEY.intValue()) );
			}else {
				resultMap.put("aiTimes", null);
				resultMap.put("remainingSum", null);
				resultMap.put("remainingTimes", null);
			}
			/*指定医生阅片使用次数*/
			RemoteBoneAgeOrder remoteBoneAgeOrder=new RemoteBoneAgeOrder();
			remoteBoneAgeOrder.setLaunchOrganizationId(organizationId);
			remoteBoneAgeOrder.setStatus(GlobalEnum.RemoteBoneAgeOrder.COMPLETED.getValue());
			Map<String, Object> doctorMap=remoteBoneAgeOrderService.getRemoteBoneAgeOrderTimes(remoteBoneAgeOrder);
			if (doctorMap!=null) {
				resultMap.put("doctorTimes", doctorMap.get("doctorTimes")==null ? null :doctorMap.get("doctorTimes"));
			}else {
				resultMap.put("doctorTimes", null);
			}
			return new JsonApi(ApiCodeEnum.OK, resultMap);
	}
	
	/**
	 * @author: ChenYan
	 * @date: 2019年3月6日
	 * @param aiReadFilm
	 * @param result
	 * @param organizationId
	 * @return
	 * @description: 人工智能阅片列表
	 */
	@RequiresAuthentication(ignore=true,level = Level.OPERATION, value = { "web-module-bone-age:ai-read-film:get-list" })
	@GetMapping(value = { "/ai/read/films" })
	public JsonApi getList(@Validated({ BaseEntity.SelectAll.class })  AiReadFilm aiReadFilm, BindingResult result,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_ID) Integer organizationId) {
		aiReadFilm.setOrganizationId(organizationId);
		Page<?> page = PageHelper.startPage(aiReadFilm.getPage(), aiReadFilm.getPageSize());
		List<Map<String, Object>> aiReadFilmList = aiReadFilmService.getList(aiReadFilm);
		if (aiReadFilmList != null && !aiReadFilmList.isEmpty()) {
			return new JsonApi(ApiCodeEnum.OK, new MultiLine(page.getTotal(), aiReadFilmList));
		}
		return new JsonApi(ApiCodeEnum.NOT_FOUND);
	}

	/** 
	 * @author: WangHuaQiang
	 * @date: 2019年3月7日
	 * @param file
	 * @param aiReadFilm
	 * @param result
	 * @param token
	 * @param organizationId
	 * @param baseBoneAgeOrderId
	 * @param organizationTeamId
	 * @return
	 * @throws IllegalStateException
	 * @throws IOException
	 * @description: 上传骨龄片到人工智能合作公司
	 */
	@RequiresAuthentication(ignore=true,value = { "web-module-bone-age:ai-boneage-upload:insert" },level = Level.OPERATION)
	@PostMapping(value = { "/ai/boneage/upload/{baseBoneAgeOrderId}" })
	public JsonApi upload(@RequestParam("file") MultipartFile file,@Validated({ BaseEntity.Insert.class }) AiReadFilm aiReadFilm,
			BindingResult result, @RequestHeader(required = true, value = BaseGlobal.TOKEN_FLAG) String token,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_ID) Integer organizationId,
			@PathVariable("baseBoneAgeOrderId") Integer baseBoneAgeOrderId,
			@RequestHeader(required = true, value = BaseGlobal.ORGANIZATION_TEAM_ID) Integer organizationTeamId) throws IllegalStateException, IOException{
		// 查询骨龄工单详情
		BoneAgeOrder boneAgeOrder = new BoneAgeOrder();
		boneAgeOrder.setId(baseBoneAgeOrderId);
		Map<String, Object>  boneAgeOrderMap=boneAgeOrderService.getOne(boneAgeOrder);
		if (boneAgeOrderMap==null) {
			return new JsonApi(ApiCodeEnum.NOT_FOUND);
		}
		if(boneAgeOrderMap.get("birthday") == null){
			return new JsonApi(ApiCodeEnum.FAIL).setMsg("用户出生信息不完整！");
		}
		// 得到用户信息
		float height = (float) boneAgeOrderMap.get("height");
		float weight = (float) boneAgeOrderMap.get("weight");
		Boolean menarcheType = null;
		if(((Integer)boneAgeOrderMap.get("sex")) == Sex.SEX_MAN.getValue()){
			menarcheType = false;
		}
		if(boneAgeOrderMap.get("menarcheType") != null && ((Integer)boneAgeOrderMap.get("menarcheType")) == Menarche.MENARCHE_TYPE_TEO.getValue()){
			menarcheType = true;
		}
		Date birthday = (Date) boneAgeOrderMap.get("birthday");
		// 设置请求文本参数
		Map<String,String> requestText = new HashMap<String,String>();
		requestText.put("birth_date", birthday.toString());
		requestText.put("weight", weight+"");
		requestText.put("height", height+"");
		requestText.put("menarche", menarcheType+"");
		// 设置请求文件参数
		Map<String,MultipartFile> requestFile = new HashMap<String,MultipartFile>();
		MultipartFile multipartFile = file;
		requestFile.put("file",multipartFile);
		String requestURL = uploadUrl;
		try {
			// 得到response
			String response = httpIOUtil.sendRequest(requestURL, requestText, requestFile);
			// 转为map
			JSON responseJson = (JSON) JSON.parse(response);
			@SuppressWarnings("unchecked")
			Map<String,Object> responseMap = (Map<String,Object>)responseJson;
			// 上传成功
			if ((responseMap.get("code").toString()).equals("200")) {
				@SuppressWarnings("unchecked")
				Map<String,Object> resultMap = (Map<String, Object>) responseMap.get("result");
				// 得到上传图片的id
				Integer diagnosisId = (Integer) resultMap.get("diagnosis_id");
				//aiReadFilmService.getOne(aiReadFilm)
				return new JsonApi(ApiCodeEnum.OK);
			}
		} catch (Exception e) {
			logger.warn("Failure to upload pictures to AI");
			return new JsonApi(ApiCodeEnum.FAIL);
		}
		return new JsonApi(ApiCodeEnum.FAIL);
	}


}
